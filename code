import pgzrun
import random

WIDTH = 600
HEIGHT = 500

CENTRE_X = WIDTH / 2
CENTRE_Y = HEIGHT / 2

CENTRE = (CENTRE_X, CENTRE_Y)

FINAL_LEVEL = 6
START_SPEED = 7

ITEMS = ["bag","battery","bottle","chips"]
game_over = False
game_complete = False
current_level = 1
items = []
animations = []

def draw():
    global items,current_level,game_over,game_complete
    screen.clear()
    screen.blit("bground",(0, 0))
    if game_over: 
        display_message("GAME OVER","Try again.")
    elif game_complete:
        display_message("YOU WON!","Well done.")
    else :
        for item in items:
            item.draw()

def update():
    global items
    if len(items) == 0:
        items = make_items(current_level)
        

#item creation based on current level
def make_items(number_of_extra_items):
    items_to_create = get_option_to_create(number_of_extra_items)
    new_items = create_items(items_to_create)
    layout_items(new_items)
    animate_items(new_items)
    return new_items

#Selection of items to create for the level.
def get_option_to_create(number_of_extra_items):
    items_to_create = ["paper_bag"]
    for i in range(0,number_of_extra_items):
        random_option = random.choice(ITEMS)
        items_to_create.append(random_option)
    return items_to_create

def create_items(items_to_create):
    new_items = []
    for pic in items_to_create: #option
        item = Actor(pic+"img")
        new_items.append(item)
    return new_items

def layout_items(items_to_layout):
    num_of_gaps = len(items_to_layout) +1
    gap_size = WIDTH / num_of_gaps
    random.shuffle(items_to_layout)
    for index, item in enumerate(items_to_layout):
        new_x_pos = (index + 1) * gap_size
        item.x = new_x_pos


def animate_items(items_to_animate):
    pass

def handle_game_over():
    pass

def on_mouse_down(pos):
    pass

def handle_game_complete():
    pass

def stop_animations(animations_to_stop):
    pass

def display_message(heading_text,sub_heading_text):
    pass


pgzrun.go()
